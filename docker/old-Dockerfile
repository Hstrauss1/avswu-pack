# syntax=docker/dockerfile:1
#
# docker file for creating hyperledger fabric ubuntu container
#
FROM ubuntu:22.04

# environment variables
ARG USER="root"
ARG HOME="/root"

# container startup scripts
ARG STARTUP="startup"
ENV STARTUP_DIR=$HOME/$STARTUP

# github desktop
ARG GITHUB_DESKTOP_FILE="GitHubDesktop-linux-2.6.3-linux1.deb"
ARG GITHUB_DESKTOP_PATH="https://github.com/shiftkey/desktop/releases/download/release-2.6.3-linux1/GitHubDesktop-linux-2.6.3-linux1.deb"

# copy bash startup script
ADD $STARTUP $STARTUP_DIR

# expose ports for ssh
EXPOSE 22
# expose ports for tightvncserver
# tightvncserver runs display 1 on port 5901 and display 2 on port 5902, et cetera
EXPOSE 5901

# create a volume to share data between host and other containers
VOLUME /shared-volume

# prevent installer from runnning in interactive mode, 
# in order to allow automation of the installation
ARG DEBIAN_FRONTEND=noninteractive

# set the time zone
ENV TZ=America/Los_Angeles

# update
RUN apt-get update
RUN apt upgrade -y

# linux core tools
RUN apt-get -y install wget
RUN apt-get -y install build-essential
RUN apt-get -y install curl

# base ubuntu system build w/ ssh and vnc support
RUN apt-get -y install sudo
RUN apt-get -y install openssh-server
RUN apt-get -y install dbus-x11
RUN apt-get -y install net-tools
RUN apt-get -y install xfce4 --no-install-recommends
RUN apt -y install xfce4-goodies
RUN apt-get -y install git
RUN apt-get -y install nano
RUN apt-get -y install vim

# install github desktop
RUN wget $GITHUB_DESKTOP_PATH
RUN apt-get -y install gdebi
RUN gdebi $GITHUB_DESKTOP_FILE
RUN rm ${GITHUB_DESKTOP_FILE}

# ubuntu utilities
RUN apt-get -y install zip
RUN apt-get -y install unzip
RUN apt-get -y install tar
RUN apt-get -y install golang-go
RUN apt-get -y install python3
RUN apt-get -y install nodejs
RUN apt-get -y install  npm
RUN apt-get -y install  xfce4-terminal
RUN apt-get -y install  tree
RUN apt-get -y install  jq
RUN apt-get -y install dos2unix
RUN apt-get -y install iputils-ping
RUN apt-get -y install busybox
RUN apt-get -y install openjdk-8-jdk
RUN apt-get -y install python3-pip
RUN apt-get -y install gcc
RUN apt-get -y install make

# using tightvnc server (since it works with light xfce desktop), tigervnc client
RUN apt-get -y install tightvncserver
# copy/paste to/from client
RUN apt-get -y install autocutsel

# rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | bash -s -- -y

RUN echo 'source $HOME/.cargo/env' >> $HOME/.bashrc

# add cargo bin to path
ARG CARGO_BIN="/root/.cargo/bin"

# update and configure rust and wasm
RUN ${CARGO_BIN}/rustup default stable
RUN ${CARGO_BIN}/rustup update
RUN ${CARGO_BIN}/rustup update nightly
RUN ${CARGO_BIN}/rustup target add wasm32-unknown-unknown --toolchain nightly
RUN ${CARGO_BIN}/rustup show
RUN ${CARGO_BIN}/rustup +nightly show

# polkadot prerequisites
RUN apt-get install -y clang && \
    apt-get -y install libssl-dev && \
    apt-get -y install llvm && \
    apt-get -y install libudev-dev && \
    apt-get -y install protobuf-compiler

# polkadot and substrate config
RUN apt-get update

# download the latest version of binaryen webabsembly compiler
# set variables (arg) and environment variable (env) for binaryen webasm compiler
ARG BINARYEN_URL="https://github.com/WebAssembly/binaryen/releases/download/version_116/binaryen-version_116-x86_64-linux.tar.gz"
ARG BINARYEN_TEMP_FILE="binaryen-temp.tar.gz"
ARG BINARYEN_DIR="binaryen-version_116"
ENV PATH=$PATH:/usr/local/bin/binaryen-version_116/bin/

# download latest binaryen version
RUN curl -L $BINARYEN_URL -o ${BINARYEN_TEMP_FILE}".tar.gz"

# uncompress, and extract from tar file
RUN gunzip ${BINARYEN_TEMP_FILE}".tar.gz"
RUN tar -xvf ${BINARYEN_TEMP_FILE}".tar"
RUN rm -fr ${BINARYEN_TEMP_FILE}".tar"

# move the file to /usr/local
RUN mv ${BINARYEN_DIR} /usr/local/bin

# prepare a substrate node
RUN git clone https://github.com/substrate-developer-hub/substrate-node-template

# compile the substrate node template
RUN cd substrate-node-template ; git checkout latest ; ${CARGO_BIN}/cargo build --release ; cd ..

# install the front-end (ReactJS)
RUN git clone https://github.com/substrate-developer-hub/substrate-front-end-template
RUN npm install -g yarn
RUN cd substrate-front-end-template; git checkout latest; yarn install; cd ..

# configure cargo for smart contracts
#      update the rust environment
RUN ${CARGO_BIN}/rustup update
RUN ${CARGO_BIN}/rustup update nightly
RUN ${CARGO_BIN}/rustup component add rust-src --toolchain nightly
RUN ${CARGO_BIN}/rustup target add wasm32-unknown-unknown --toolchain nightly
# install smart contract lint
RUN ${CARGO_BIN}/cargo install cargo-dylint dylint-link

#TODO: #1 debug and get cargo contract to work under ubuntu v16 if possible
# install cargo contract
RUN ${CARGO_BIN}/cargo install --force --locked cargo-contract

# install glib for node addon/plugin support
RUN apt-get -y install libglib2.0-dev

# install polkadot standard binary
RUN curl -sL https://github.com/paritytech/polkadot/releases/download/v0.9.28/polkadot -o polkadot
RUN chmod a+x polkadot
RUN mv polkadot /usr/bin

# GNU Multiple Precision Arithmetic Library, https://gmplib.org
RUN apt-get -y install m4
RUN apt-get -y install -y lzip
RUN apt-get -y install xz-utils
ARG GMP_URL="https://gmplib.org/download/gmp/gmp-6.3.0.tar.xz"
ARG GMP_VERSION="gmp-6.3.0"
RUN curl -L $GMP_URL -o ${GMP_VERSION}".tar.xz"
RUN xz -d -v ${GMP_VERSION}".tar.xz"
RUN tar -xvf ${GMP_VERSION}".tar"
RUN rm -f ${GMP_VERSION}".tar"
RUN mv ${GMP_VERSION} /usr/local
WORKDIR /usr/local/${GMP_VERSION}
RUN ./configure
RUN make
RUN make install

# PBC, stanford's pbc, pair based cryptography, https://crypto.stanford.edu/pbc/howto.html
RUN apt-get -y install flex
RUN apt-get -y install bison
ARG PBC_URL="https://crypto.stanford.edu/pbc/files/pbc-0.5.14.tar.gz"
ARG PBC_VERSION="pbc-0.5.14"
RUN curl -L $PBC_URL -o ${PBC_VERSION}".tar.gz"
RUN gzip -d ${PBC_VERSION}".tar.gz"
RUN tar -xvf ${PBC_VERSION}".tar"
RUN rm -f ${PBC_VERSION}".tar"
RUN mv ${PBC_VERSION} /usr/local
WORKDIR /usr/local/${PBC_VERSION}
RUN ./configure
RUN make
RUN make install

# CPABE libraries, http://acsc.cs.utexas.edu/cpabe
RUN apt-get -y install libglib2.0-dev
RUN apt-get -y install libgtk2.0-dev

# CPABE libbswabe
# cpabe shared library run-time load path for .so files
ENV LD_LIBRARY_PATH="/usr/local/lib"
ARG CPABE_URL="http://acsc.cs.utexas.edu/cpabe/libbswabe-0.9.tar.gz"
ARG CPABE_VERSION="libbswabe-0.9"
RUN curl -L ${CPABE_URL} -o ${CPABE_VERSION}".tar.gz"
RUN gzip -d ${CPABE_VERSION}".tar.gz"
RUN tar -xvf ${CPABE_VERSION}".tar"
RUN rm -f ${CPABE_VERSION}".tar"
RUN mv ${CPABE_VERSION} /usr/local
WORKDIR /usr/local/${CPABE_VERSION}
RUN ./configure CFLAGS="-O3 -Wall -fPIC"
RUN make
RUN make install

# grpc, based on https://grpc.io/docs/languages/cpp/quickstart/#install-grpc
# grpc prereqs
RUN apt-get -y install build-essential autoconf libtool pkg-config
# build gRPC and protocol buffers
ARG GRPC_INSTALL_DIR=/usr/local
WORKDIR ${GRPC_INSTALL_DIR}
RUN git clone --recurse-submodules -b v1.58.0 --depth 1 --shallow-submodules https://github.com/grpc/grpc
ARG GRPC_DIR=${GRPC_INSTALL_DIR}/grpc
WORKDIR ${GRPC_DIR}/cmake/build
RUN cmake -DgRPC_INSTALL=ON -DgRPC_BUILD_TESTS=OFF -DCMAKE_INSTALL_PREFIX=${GRPC_INSTALL_DIR} ${GRPC_DIR}
RUN make -j 4
RUN make install
# clean up the build directory (for diskspace)
RUN rm -fr ${GRPC_DIR}/cmake/build

# change to root home dir
WORKDIR /root

# upon creation of the container run the startup script, and do any clean 
# up on the container, set time zone, then start bash
CMD \
    # set timezone
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone ; \
    # run the startup script
    chmod +x $STARTUP_DIR/ubuntu-start.sh ; \
    $STARTUP_DIR/ubuntu-start.sh ; \
    # start a bash shell
    /bin/bash
